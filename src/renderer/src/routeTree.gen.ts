/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as MapImport } from './routes/Map'
import { Route as MapTab1Import } from './routes/Map/tab1'
import { Route as WelcomeImport } from './routes/Welcome'
import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const WelcomeRoute = WelcomeImport.update({
	id: '/Welcome',
	path: '/Welcome',
	getParentRoute: () => rootRoute,
} as any)

const MapRoute = MapImport.update({
	id: '/Map',
	path: '/Map',
	getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRoute,
} as any)

const MapTab1Route = MapTab1Import.update({
	id: '/tab1',
	path: '/tab1',
	getParentRoute: () => MapRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof IndexImport
			parentRoute: typeof rootRoute
		}
		'/Map': {
			id: '/Map'
			path: '/Map'
			fullPath: '/Map'
			preLoaderRoute: typeof MapImport
			parentRoute: typeof rootRoute
		}
		'/Welcome': {
			id: '/Welcome'
			path: '/Welcome'
			fullPath: '/Welcome'
			preLoaderRoute: typeof WelcomeImport
			parentRoute: typeof rootRoute
		}
		'/Map/tab1': {
			id: '/Map/tab1'
			path: '/tab1'
			fullPath: '/Map/tab1'
			preLoaderRoute: typeof MapTab1Import
			parentRoute: typeof MapImport
		}
	}
}

// Create and export the route tree

interface MapRouteChildren {
	MapTab1Route: typeof MapTab1Route
}

const MapRouteChildren: MapRouteChildren = {
	MapTab1Route: MapTab1Route,
}

const MapRouteWithChildren = MapRoute._addFileChildren(MapRouteChildren)

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute
	'/Map': typeof MapRouteWithChildren
	'/Welcome': typeof WelcomeRoute
	'/Map/tab1': typeof MapTab1Route
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute
	'/Map': typeof MapRouteWithChildren
	'/Welcome': typeof WelcomeRoute
	'/Map/tab1': typeof MapTab1Route
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	'/': typeof IndexRoute
	'/Map': typeof MapRouteWithChildren
	'/Welcome': typeof WelcomeRoute
	'/Map/tab1': typeof MapTab1Route
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths: '/' | '/Map' | '/Welcome' | '/Map/tab1'
	fileRoutesByTo: FileRoutesByTo
	to: '/' | '/Map' | '/Welcome' | '/Map/tab1'
	id: '__root__' | '/' | '/Map' | '/Welcome' | '/Map/tab1'
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute
	MapRoute: typeof MapRouteWithChildren
	WelcomeRoute: typeof WelcomeRoute
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	MapRoute: MapRouteWithChildren,
	WelcomeRoute: WelcomeRoute,
}

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Map",
        "/Welcome"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Map": {
      "filePath": "Map.tsx",
      "children": [
        "/Map/tab1"
      ]
    },
    "/Welcome": {
      "filePath": "Welcome.tsx"
    },
    "/Map/tab1": {
      "filePath": "Map/tab1.tsx",
      "parent": "/Map"
    }
  }
}
ROUTE_MANIFEST_END */
