/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as MapTabsMapImport } from './routes/(MapTabs)/_Map'
import { Route as MapTabsMapTab1Import } from './routes/(MapTabs)/_Map.tab1'
import { Route as MapTabsMapTab2Import } from './routes/(MapTabs)/_Map.tab2'
import { Route as WelcomeImport } from './routes/Welcome'
// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const MapTabsImport = createFileRoute('/(MapTabs)')()

// Create/Update Routes

const MapTabsRoute = MapTabsImport.update({
	id: '/(MapTabs)',
	getParentRoute: () => rootRoute,
} as any)

const WelcomeRoute = WelcomeImport.update({
	id: '/Welcome',
	path: '/Welcome',
	getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRoute,
} as any)

const MapTabsMapRoute = MapTabsMapImport.update({
	id: '/_Map',
	getParentRoute: () => MapTabsRoute,
} as any)

const MapTabsMapTab2Route = MapTabsMapTab2Import.update({
	id: '/tab2',
	path: '/tab2',
	getParentRoute: () => MapTabsMapRoute,
} as any)

const MapTabsMapTab1Route = MapTabsMapTab1Import.update({
	id: '/tab1',
	path: '/tab1',
	getParentRoute: () => MapTabsMapRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof IndexImport
			parentRoute: typeof rootRoute
		}
		'/Welcome': {
			id: '/Welcome'
			path: '/Welcome'
			fullPath: '/Welcome'
			preLoaderRoute: typeof WelcomeImport
			parentRoute: typeof rootRoute
		}
		'/(MapTabs)': {
			id: '/(MapTabs)'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof MapTabsImport
			parentRoute: typeof rootRoute
		}
		'/(MapTabs)/_Map': {
			id: '/(MapTabs)/_Map'
			path: '/'
			fullPath: '/'
			preLoaderRoute: typeof MapTabsMapImport
			parentRoute: typeof MapTabsRoute
		}
		'/(MapTabs)/_Map/tab1': {
			id: '/(MapTabs)/_Map/tab1'
			path: '/tab1'
			fullPath: '/tab1'
			preLoaderRoute: typeof MapTabsMapTab1Import
			parentRoute: typeof MapTabsMapImport
		}
		'/(MapTabs)/_Map/tab2': {
			id: '/(MapTabs)/_Map/tab2'
			path: '/tab2'
			fullPath: '/tab2'
			preLoaderRoute: typeof MapTabsMapTab2Import
			parentRoute: typeof MapTabsMapImport
		}
	}
}

// Create and export the route tree

interface MapTabsMapRouteChildren {
	MapTabsMapTab1Route: typeof MapTabsMapTab1Route
	MapTabsMapTab2Route: typeof MapTabsMapTab2Route
}

const MapTabsMapRouteChildren: MapTabsMapRouteChildren = {
	MapTabsMapTab1Route: MapTabsMapTab1Route,
	MapTabsMapTab2Route: MapTabsMapTab2Route,
}

const MapTabsMapRouteWithChildren = MapTabsMapRoute._addFileChildren(
	MapTabsMapRouteChildren,
)

interface MapTabsRouteChildren {
	MapTabsMapRoute: typeof MapTabsMapRouteWithChildren
}

const MapTabsRouteChildren: MapTabsRouteChildren = {
	MapTabsMapRoute: MapTabsMapRouteWithChildren,
}

const MapTabsRouteWithChildren =
	MapTabsRoute._addFileChildren(MapTabsRouteChildren)

export interface FileRoutesByFullPath {
	'/': typeof MapTabsMapRouteWithChildren
	'/Welcome': typeof WelcomeRoute
	'/tab1': typeof MapTabsMapTab1Route
	'/tab2': typeof MapTabsMapTab2Route
}

export interface FileRoutesByTo {
	'/': typeof MapTabsMapRouteWithChildren
	'/Welcome': typeof WelcomeRoute
	'/tab1': typeof MapTabsMapTab1Route
	'/tab2': typeof MapTabsMapTab2Route
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	'/': typeof IndexRoute
	'/Welcome': typeof WelcomeRoute
	'/(MapTabs)': typeof MapTabsRouteWithChildren
	'/(MapTabs)/_Map': typeof MapTabsMapRouteWithChildren
	'/(MapTabs)/_Map/tab1': typeof MapTabsMapTab1Route
	'/(MapTabs)/_Map/tab2': typeof MapTabsMapTab2Route
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths: '/' | '/Welcome' | '/tab1' | '/tab2'
	fileRoutesByTo: FileRoutesByTo
	to: '/' | '/Welcome' | '/tab1' | '/tab2'
	id:
		| '__root__'
		| '/'
		| '/Welcome'
		| '/(MapTabs)'
		| '/(MapTabs)/_Map'
		| '/(MapTabs)/_Map/tab1'
		| '/(MapTabs)/_Map/tab2'
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute
	WelcomeRoute: typeof WelcomeRoute
	MapTabsRoute: typeof MapTabsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	WelcomeRoute: WelcomeRoute,
	MapTabsRoute: MapTabsRouteWithChildren,
}

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Welcome",
        "/(MapTabs)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Welcome": {
      "filePath": "Welcome.tsx"
    },
    "/(MapTabs)": {
      "filePath": "(MapTabs)",
      "children": [
        "/(MapTabs)/_Map"
      ]
    },
    "/(MapTabs)/_Map": {
      "filePath": "(MapTabs)/_Map.tsx",
      "parent": "/(MapTabs)",
      "children": [
        "/(MapTabs)/_Map/tab1",
        "/(MapTabs)/_Map/tab2"
      ]
    },
    "/(MapTabs)/_Map/tab1": {
      "filePath": "(MapTabs)/_Map.tab1.tsx",
      "parent": "/(MapTabs)/_Map"
    },
    "/(MapTabs)/_Map/tab2": {
      "filePath": "(MapTabs)/_Map.tab2.tsx",
      "parent": "/(MapTabs)/_Map"
    }
  }
}
ROUTE_MANIFEST_END */
